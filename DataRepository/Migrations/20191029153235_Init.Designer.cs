// <auto-generated />
using System;
using DataRepository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataRepository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20191029153235_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataRepository.DbEntities.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid?>("RegionId");

                    b.HasKey("CityId");

                    b.HasIndex("RegionId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("DataRepository.DbEntities.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("DataRepository.DbEntities.Image", b =>
                {
                    b.Property<Guid>("ImageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<Guid?>("PortfolioProjectId");

                    b.HasKey("ImageId");

                    b.HasIndex("PortfolioProjectId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("DataRepository.DbEntities.PortfolioProject", b =>
                {
                    b.Property<Guid>("PortfolioProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<Guid>("WorkerId");

                    b.HasKey("PortfolioProjectId");

                    b.HasIndex("WorkerId");

                    b.ToTable("PortfolioProject");
                });

            modelBuilder.Entity("DataRepository.DbEntities.Region", b =>
                {
                    b.Property<Guid>("RegionId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("RegionId");

                    b.HasIndex("CountryId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("DataRepository.DbEntities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int?>("WorkerTypeId");

                    b.HasKey("ServiceId");

                    b.HasIndex("WorkerTypeId");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("DataRepository.DbEntities.WorkGeography", b =>
                {
                    b.Property<Guid>("WorkGeographyId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CityId");

                    b.Property<Guid?>("CountryId");

                    b.Property<Guid?>("RegionId");

                    b.Property<Guid?>("WorkerId");

                    b.HasKey("WorkGeographyId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionId");

                    b.HasIndex("WorkerId");

                    b.ToTable("WorkGeography");
                });

            modelBuilder.Entity("DataRepository.DbEntities.Worker", b =>
                {
                    b.Property<Guid>("WorkerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactInfo");

                    b.Property<string>("Name");

                    b.Property<int>("WorkerTypeId");

                    b.HasKey("WorkerId");

                    b.HasIndex("WorkerTypeId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("DataRepository.DbEntities.WorkerCity", b =>
                {
                    b.Property<Guid>("WorkerCityId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CityId");

                    b.Property<Guid>("WorkerId");

                    b.HasKey("WorkerCityId");

                    b.HasIndex("CityId");

                    b.HasIndex("WorkerId");

                    b.ToTable("WorkerCity");
                });

            modelBuilder.Entity("DataRepository.DbEntities.WorkerPrice", b =>
                {
                    b.Property<Guid>("WorkerPriceId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("WorkerId");

                    b.HasKey("WorkerPriceId");

                    b.HasIndex("WorkerId")
                        .IsUnique();

                    b.ToTable("WorkerPrice");
                });

            modelBuilder.Entity("DataRepository.DbEntities.WorkerService", b =>
                {
                    b.Property<Guid>("WorkerServiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ServiceId");

                    b.Property<Guid>("WorkerId");

                    b.HasKey("WorkerServiceId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("WorkerId");

                    b.ToTable("WorkerService");
                });

            modelBuilder.Entity("DataRepository.DbEntities.WorkerType", b =>
                {
                    b.Property<int>("WorkerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("WorkerTypeId");

                    b.ToTable("WorkerType");
                });

            modelBuilder.Entity("DataRepository.DbEntities.City", b =>
                {
                    b.HasOne("DataRepository.DbEntities.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("DataRepository.DbEntities.Image", b =>
                {
                    b.HasOne("DataRepository.DbEntities.PortfolioProject", "PortfolioProject")
                        .WithMany("Images")
                        .HasForeignKey("PortfolioProjectId");
                });

            modelBuilder.Entity("DataRepository.DbEntities.PortfolioProject", b =>
                {
                    b.HasOne("DataRepository.DbEntities.Worker", "Worker")
                        .WithMany("PortfolioProjects")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataRepository.DbEntities.Region", b =>
                {
                    b.HasOne("DataRepository.DbEntities.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("DataRepository.DbEntities.Service", b =>
                {
                    b.HasOne("DataRepository.DbEntities.WorkerType", "WorkerType")
                        .WithMany("Services")
                        .HasForeignKey("WorkerTypeId");
                });

            modelBuilder.Entity("DataRepository.DbEntities.WorkGeography", b =>
                {
                    b.HasOne("DataRepository.DbEntities.City", "City")
                        .WithMany("WorkGeographies")
                        .HasForeignKey("CityId");

                    b.HasOne("DataRepository.DbEntities.Country", "Country")
                        .WithMany("WorkGeographies")
                        .HasForeignKey("CountryId");

                    b.HasOne("DataRepository.DbEntities.Region", "Region")
                        .WithMany("WorkGeographies")
                        .HasForeignKey("RegionId");

                    b.HasOne("DataRepository.DbEntities.Worker", "Worker")
                        .WithMany("WorkGeographies")
                        .HasForeignKey("WorkerId");
                });

            modelBuilder.Entity("DataRepository.DbEntities.Worker", b =>
                {
                    b.HasOne("DataRepository.DbEntities.WorkerType", "WorkerType")
                        .WithMany()
                        .HasForeignKey("WorkerTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataRepository.DbEntities.WorkerCity", b =>
                {
                    b.HasOne("DataRepository.DbEntities.City", "City")
                        .WithMany("WorkerCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataRepository.DbEntities.Worker", "Worker")
                        .WithMany("WorkerCities")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataRepository.DbEntities.WorkerPrice", b =>
                {
                    b.HasOne("DataRepository.DbEntities.Worker", "Worker")
                        .WithOne("WorkerPrice")
                        .HasForeignKey("DataRepository.DbEntities.WorkerPrice", "WorkerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataRepository.DbEntities.WorkerService", b =>
                {
                    b.HasOne("DataRepository.DbEntities.Service", "Service")
                        .WithMany("WorkerServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DataRepository.DbEntities.Worker", "Worker")
                        .WithMany("WorkerServices")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
